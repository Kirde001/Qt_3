#include "editbookdialog.h"
#include <QFormLayout>
#include <QMessageBox>
#include <QDate>
#include <QLineEdit>
#include <QKeyEvent> // Add QKeyEvent

EditBookDialog::EditBookDialog(QWidget *parent)
    : QDialog(parent)
{
    setupUi();
    connect(buttonBox, &QDialogButtonBox::accepted, this, &EditBookDialog::on_buttonBox_accepted);
    connect(buttonBox, &QDialogButtonBox::rejected, this, &QDialog::reject);
}

EditBookDialog::~EditBookDialog()
{
}

void EditBookDialog::setupUi()
{
    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    QFormLayout *formLayout = new QFormLayout();

    authorLineEdit = new QLineEdit();
    titleLineEdit = new QLineEdit();
    publishDateEdit = new QDateEdit();
    genreLineEdit = new QLineEdit();
    publisherLineEdit = new QLineEdit();
    isbnLineEdit = new QLineEdit();
    pageCountSpinBox = new QSpinBox();

    // Настройка QDateEdit
    publishDateEdit->setCalendarPopup(true);
    publishDateEdit->setDisplayFormat("yyyy-MM-dd");
    publishDateEdit->setDate(QDate::currentDate());

    // *** Отключаем кнопки-стрелки ***
    publishDateEdit->setButtonSymbols(QAbstractSpinBox::NoButtons);

    // *** Устанавливаем event filter на внутренний QLineEdit для блокировки клавиатурного ввода ***
    if (publishDateEdit->lineEdit()) {
        publishDateEdit->lineEdit()->installEventFilter(this);
        // Можно также явно установить ему фокус policy, который не принимает фокус от Tab или мыши,
        // но это может повлиять на доступность. Event filter более целенаправлен.
        // publishDateEdit->lineEdit()->setFocusPolicy(Qt::NoFocus);
    }


    // Настройка QSpinBox для количества страниц
    pageCountSpinBox->setRange(0, 10000);

    // Добавление виджетов в слой формы с соответствующими метками
    formLayout->addRow("Автор:", authorLineEdit);
    formLayout->addRow("Название:", titleLineEdit);
    formLayout->addRow("Дата издания:", publishDateEdit);
    formLayout->addRow("Жанр:", genreLineEdit);
    formLayout->addRow("Издательство:", publisherLineEdit);
    formLayout->addRow("ISBN:", isbnLineEdit);
    formLayout->addRow("Количество страниц:", pageCountSpinBox);

    // Создание стандартных кнопок OK и Cancel
    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel);

    // Добавление слоев в основной слой диалога
    mainLayout->addLayout(formLayout);
    mainLayout->addWidget(buttonBox);

    setLayout(mainLayout);
    setWindowTitle("Редактировать книгу");
}

// Реализация eventFilter для блокировки клавиатурного ввода в QDateEdit's lineEdit
bool EditBookDialog::eventFilter(QObject *watched, QEvent *event)
{
    // Проверяем, что событие предназначено для lineEdit внутри publishDateEdit
    if (watched == publishDateEdit->lineEdit()) {
        // Если событие - это нажатие клавиши
        if (event->type() == QEvent::KeyPress) {
            // Преобразуем событие к типу QKeyEvent
            QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
            // Отладочное сообщение:qDebug() << "Intercepted key press:" << keyEvent->key();

            // Возвращаем true, чтобы "потребить" (игнорировать) событие.
            // Это предотвратит ввод текста в QLineEdit.
            return true;
        }
        // Можно также перехватить QEvent::Wheel для отключения изменения даты с помощью колеса мыши
        // if (event->type() == QEvent::Wheel) {
        //     return true; // Consume wheel event
        // }
    }

    // Для всех остальных объектов и типов событий, передаем событие дальше для обычной обработки
    return QDialog::eventFilter(watched, event);
}
