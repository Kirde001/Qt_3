#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QStandardItemModel>
// #include <QSortFilterProxyModel> // Заменяем на нашу кастомную модель
#include "booksortfilterproxymodel.h" // Включаем заголовок нашей кастомной прокси-модели
#include <QComboBox> // Для комбобокса выбора поля поиска
#include <QLineEdit> // Для поля ввода текста поиска
#include <QDate> // Для работы с QDate


QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

// Объявление класса диалогового окна для редактирования/добавления
class EditBookDialog;

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    // Слоты для кнопок управления данными
    void addBook();
    void editBook();
    void removeBook();
    // Слот для общей кнопки поиска
    void searchBooks();

    // Слоты для действий меню Импорт/Экспорт
    void importCSV();
    void exportCSV();
    void importJSON();
    void exportJSON();

private:
    Ui::MainWindow *ui; // Указатель на объект UI, сгенерированный из .ui файла
    QStandardItemModel *model; // Модель данных для хранения списка книг
    // QSortFilterProxyModel *proxyModel; // Заменяем тип на наш кастомный
    BookSortFilterProxyModel *proxyModel; // Кастомная прокси-модель для фильтрации и сортировки

    // Объявления приватных методов
    void setupModel(); // Настройка модели данных
    void setupSearch(); // Настройка элементов управления поиском

    // Вспомогательная функция для получения индекса столбца по его названию заголовка
    int getColumnIndex(const QString &columnTitle) const;

    // Вспомогательная функция для заполнения комбобоксов поиска
    void populateSearchComboBox(QComboBox *comboBox);
};
#endif // MAINWINDOW_H
