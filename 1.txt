#include "editbookdialog.h" // Подключаем заголовочный файл для этого класса

// Необходимые Qt-заголовки для используемых виджетов и компоновок
#include <QVBoxLayout>        // Для вертикальной компоновки
#include <QFormLayout>        // Для компоновки формы (метка-поле)
#include <QLineEdit>          // Для полей ввода текста
#include <QDateEdit>          // Для выбора даты
#include <QSpinBox>           // Для ввода числовых значений (количество страниц)
#include <QDialogButtonBox>   // Для стандартных кнопок (OK, Cancel)
#include <QMessageBox>        // Для отображения сообщений об ошибках/предупреждениях
#include <QDate>              // Для работы с датами (QDate::currentDate())
#include <QKeyEvent>          // Для обработки событий клавиатуры в eventFilter
#include <QDebug>             // Для отладочных сообщений (опционально)

// Конструктор класса EditBookDialog
EditBookDialog::EditBookDialog(QWidget *parent)
    : QDialog(parent) // Вызываем конструктор базового класса QDialog
{
    setupUi(); // Вызываем метод для настройки пользовательского интерфейса

    // Соединяем сигналы и слоты
    // Сигнал accepted от buttonBox соединяется со слотом on_buttonBox_accepted текущего объекта
    connect(buttonBox, &QDialogButtonBox::accepted, this, &EditBookDialog::on_buttonBox_accepted);
    // Сигнал rejected от buttonBox соединяется со стандартным слотом reject базового класса QDialog
    connect(buttonBox, &QDialogButtonBox::rejected, this, &QDialog::reject);
}

// Деструктор класса EditBookDialog
EditBookDialog::~EditBookDialog()
{
    // Явная очистка памяти обычно не требуется, так как Qt управляет дочерними виджетами
    // и компоновками при установке родителя (this).
}

// Метод для настройки пользовательского интерфейса
void EditBookDialog::setupUi()
{
    // Главная вертикальная компоновка для всего диалога
    QVBoxLayout *mainLayout = new QVBoxLayout(this); // 'this' устанавливает родителя для компоновки

    // Компоновка формы для пар метка-виджет
    QFormLayout *formLayout = new QFormLayout();

    // Создаем виджеты ввода, указывая 'this' как родителя для управления памятью
    authorLineEdit = new QLineEdit(this);
    titleLineEdit = new QLineEdit(this);
    publishDateEdit = new QDateEdit(this);
    genreLineEdit = new QLineEdit(this);
    publisherLineEdit = new QLineEdit(this);
    isbnLineEdit = new QLineEdit(this);
    pageCountSpinBox = new QSpinBox(this);

    // Настройка QDateEdit (выбор даты)
    publishDateEdit->setCalendarPopup(true);          // Включить всплывающий календарь
    publishDateEdit->setDisplayFormat("yyyy-MM-dd"); // Установить формат отображения даты
    publishDateEdit->setDate(QDate::currentDate());   // Установить текущую дату по умолчанию
    publishDateEdit->setButtonSymbols(QAbstractSpinBox::NoButtons); // Скрыть кнопки-стрелки

    // *** Устанавливаем фильтр событий на сам QDateEdit для блокировки ввода с клавиатуры ***
    publishDateEdit->installEventFilter(this);

    // Настройка QSpinBox (количество страниц)
    pageCountSpinBox->setRange(0, 10000); // Установить минимальное и максимальное значение
    // pageCountSpinBox->setSuffix(" стр."); // Опционально: добавить суффикс

    // Добавляем виджеты в компоновку формы с соответствующими метками
    formLayout->addRow("Автор:", authorLineEdit);
    formLayout->addRow("Название:", titleLineEdit);
    formLayout->addRow("Дата издания:", publishDateEdit);
    formLayout->addRow("Жанр:", genreLineEdit);
    formLayout->addRow("Издательство:", publisherLineEdit);
    formLayout->addRow("ISBN:", isbnLineEdit);
    formLayout->addRow("Количество страниц:", pageCountSpinBox);

    // Создаем стандартные кнопки OK и Cancel, указывая 'this' как родителя
    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel, this);

    // Добавляем компоновку формы и панель кнопок в главную компоновку
    mainLayout->addLayout(formLayout);
    mainLayout->addWidget(buttonBox);

    // Устанавливаем главную компоновку для диалогового окна
    setLayout(mainLayout);

    // Устанавливаем заголовок окна
    setWindowTitle("Редактировать книгу");

    // Опционально: можно установить размер окна
    // resize(400, 300);
}

// Реализация фильтра событий для блокировки ввода с клавиатуры в QDateEdit
bool EditBookDialog::eventFilter(QObject *watched, QEvent *event)
{
    // Проверяем, относится ли событие к нашему виджету publishDateEdit
    if (watched == publishDateEdit) {
        // Если тип события - нажатие клавиши
        if (event->type() == QEvent::KeyPress) {
            // QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event); // Можно использовать для специфичной логики клавиш
            // Отладочное сообщение: qDebug() << "Перехвачено нажатие клавиши на QDateEdit:" << keyEvent->key();

            // Возвращаем true, чтобы "поглотить" событие. Это предотвратит его дальнейшую обработку
            // виджетом QDateEdit (т.е. ввод даты с клавиатуры будет заблокирован).
            return true;
        }
        // Опционально: можно фильтровать и другие события, например, колесо мыши
        // if (event->type() == QEvent::Wheel) {
        //     return true; // Поглотить событие колеса мыши
        // }
    }

    // Для всех остальных объектов и типов событий передаем управление базовому классу
    return QDialog::eventFilter(watched, event);
}

// Реализация слота, вызываемого при нажатии кнопки "OK" (сигнал accepted)
void EditBookDialog::on_buttonBox_accepted()
{
    // --- Пример реализации ---
    // Здесь обычно выполняется:
    // 1. Валидация введенных данных (например, проверка на пустоту обязательных полей).
    // 2. Если валидация прошла успешно, вызывается accept(), что закрывает диалог
    //    и возвращает QDialog::Accepted.
    // 3. Если валидация не прошла, выводится сообщение об ошибке (например, через QMessageBox)
    //    и диалог НЕ закрывается (accept() не вызывается).

    // Пример базовой валидации: проверка, что поля "Автор" и "Название" не пустые
    if (authorLineEdit->text().trimmed().isEmpty()) {
        QMessageBox::warning(this, "Ошибка ввода", "Поле 'Автор' не может быть пустым.");
        authorLineEdit->setFocus(); // Установить фокус на поле с ошибкой
        return; // Прервать выполнение, не закрывая диалог
    }

    if (titleLineEdit->text().trimmed().isEmpty()) {
        QMessageBox::warning(this, "Ошибка ввода", "Поле 'Название' не может быть пустым.");
        titleLineEdit->setFocus();
        return; // Прервать выполнение, не закрывая диалог
    }

    // Если все проверки пройдены успешно, принимаем диалог
    QDialog::accept(); // Закрывает диалог и сигнализирует об успешном завершении
}

/*
// --- Геттеры (опционально) ---
// Если вам нужно получать данные из диалога после его закрытия (при QDialog::Accepted),
// добавьте методы-геттеры в класс EditBookDialog (объявите их в .h файле):

QString EditBookDialog::getAuthor() const {
    return authorLineEdit->text();
}

QString EditBookDialog::getTitle() const {
    return titleLineEdit->text();
}

QDate EditBookDialog::getPublishDate() const {
    return publishDateEdit->date();
}

QString EditBookDialog::getGenre() const {
    return genreLineEdit->text();
}

QString EditBookDialog::getPublisher() const {
    return publisherLineEdit->text();
}

QString EditBookDialog::getIsbn() const {
    return isbnLineEdit->text();
}

int EditBookDialog::getPageCount() const {
    return pageCountSpinBox->value();
}
